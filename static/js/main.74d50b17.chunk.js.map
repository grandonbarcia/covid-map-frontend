{"version":3,"sources":["PageTitle.js","TitleBar/TitleBar.js","Title.js","GlobalSummary/Country.js","GlobalSummary/Total.js","DataProvider.js","GlobalSummary/TotalConfirm.js","GlobalSummary/TotalRecover.js","GlobalSummary/TotalDeath.js","GlobalSummary/GlobalSummary.js","DailyTracker/TodaysDate.js","DailyTracker/getCurrentDate.js","DailyTracker/CategoryToggle.js","DailyTracker/BarChart.js","DailyTracker/Daily.js","DailyTracker/DailyTracker.js","UnitedStatesData/Table.js","UnitedStatesData/UnitedStatesData.js","SideBar/Posts.js","SideBar/SideBar.js","App.js","serviceWorker.js","index.js"],"names":["PageTitle","title","className","TitleBar","Title","Country","name","num","Total","DataContext","createContext","DataProvider","props","useState","total","setTotal","confirmed","setConfirmed","deaths","setDeaths","recovered","setRecovered","confirmToday","setConfirmToday","confirmThirty","setConfirmThirty","confirmTen","setConfirmTen","confirmYesterday","setConfirmYesterday","stats","setStats","statesData","setStatesData","graphData","setGraphData","useEffect","getSummary","then","handleResponse","catch","error","getDataSet","displayDailyStats","graphDataSet","getStatesData","handleStatesData","console","log","a","fetch","response","json","data","countries","Countries","gLobal","Global","getTop","byConfirmed","byDeaths","byRecovered","byCategory","sort","slice","b","TotalConfirmed","TotalDeaths","TotalRecovered","headers","byPositive","positive","dataSet","length","dates","i","push","Date","Confirmed","Deaths","Recovered","today","yesterday","tenDaysAgo","aMonthAgo","category","Provider","value","value1","value2","value3","value4","value5","value6","value7","value8","value9","value10","value11","value12","children","TotalConfirm","useContext","listCountries","map","key","split","join","TotalDeath","GlobalSummary","items","TotalRecover","TodaysDate","toDateString","CategoryToggle","setCategoryType","data-toggle","onClick","type","BarChart","categoryType","labels","setLabels","points","setPoints","toLowerCase","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","width","height","options","maintainAspectRatio","Daily","DailyTracker","setToday","setYesterday","setTenDaysAgo","setAMonthAgo","obj","hasOwnProperty","isEmpty","Table","listStates","scope","state","death","positiveIncrease","deathIncrease","UnitedStatesData","Posts","url","img","href","target","style","border","src","SideBar","posts","setPosts","getPosts","listPosts","thumbnail","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"gJAeeA,G,WAZG,SAAC,GAAa,IAAZC,EAAW,EAAXA,MAElB,OAEI,yBAAKC,UAAY,cACdD,KCYME,EAjBE,WAIf,OACE,yBAAKD,UAAY,uBACf,yBAAKA,UAAY,wBACf,kBAAC,EAAD,CAAWD,MAAM,wBCKVG,EAZD,SAAC,GAAa,IAAZH,EAAW,EAAXA,MAEd,OACE,yBAAKC,UAAY,iBACf,yBAAKA,UAAY,+BACdD,K,OCWMI,EAhBC,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,KAAMC,EAAS,EAATA,IAEtB,OACE,yBAAKL,UAAY,4BACf,yBAAKA,UAAY,mDACL,uBAATI,EAAgC,SAAWA,GAE9C,yBAAKJ,UAAY,qCACf,0BAAMA,UAAY,cACfK,MCIIC,EAbD,SAAC,GAAW,IAAVD,EAAS,EAATA,IAEd,OAEI,yBAAKL,UAAY,wCACf,yBAAKA,UAAY,yBACdK,K,uBCLEE,EAAcC,0BAEdC,EAAe,SAACC,GAI3B,IAJqC,EASbC,mBAAS,IATI,mBAShCC,EATgC,KASzBC,EATyB,OAULF,mBAAS,IAVJ,mBAUhCG,EAVgC,KAUrBC,EAVqB,OAWXJ,mBAAS,IAXE,mBAWhCK,EAXgC,KAWxBC,EAXwB,OAYLN,mBAAS,IAZJ,mBAYhCO,EAZgC,KAYrBC,EAZqB,OAabR,mBAAS,IAbI,gCAgBCA,sBAhBD,mBAgBhCS,EAhBgC,KAgBlBC,EAhBkB,OAiBGV,qBAjBH,mBAiBhCW,EAjBgC,KAiBjBC,EAjBiB,OAkBFZ,qBAlBE,mBAkBhCa,EAlBgC,KAkBnBC,EAlBmB,OAmBSd,qBAnBT,mBAmBhCe,EAnBgC,KAmBdC,EAnBc,OAqBbhB,mBAAS,IArBI,mBAqBhCiB,EArBgC,KAqBzBC,EArByB,OAsBHlB,mBAAS,IAtBN,mBAsBhCmB,EAtBgC,KAsBpBC,EAtBoB,OAuBLpB,mBAAS,IAvBJ,mBAuBhCqB,EAvBgC,KAuBrBC,EAvBqB,KAyBrCC,qBAAU,WACRC,IACGC,KAAKC,IACLC,MAAMC,IAETC,KACGJ,KAAKK,IACLL,KAAKM,IACLJ,MAAMC,IAETI,KACGP,KAAKQ,IACLN,MAAMC,IACPM,QAAQC,IAAI,iBACb,IAEH,IAAMX,EAAU,uCAAG,8BAAAY,EAAA,sEACMC,MAtCN,sCAqCA,cACXC,EADW,gBAEEA,EAASC,OAFX,cAEXC,EAFW,yBAIVA,GAJU,2CAAH,qDAOVd,GAAiB,SAACc,GACtBN,QAAQC,IAAI,+BACZ,IAAIM,EAAYD,EAAKE,UACjBC,EAASH,EAAKI,OAElBxC,EAAayC,GAAOJ,EAAWK,KAC/BxC,EAAUuC,GAAOJ,EAAWM,KAC5BvC,EAAaqC,GAAOJ,EAAWO,KAC/B9C,EAASyC,IAGLf,GAAQ,SAACA,GACbM,QAAQC,IAAI,UAAYP,IAGpBiB,GAAS,SAACJ,EAAWQ,GACvB,OAAOR,EAAUS,KAAKD,GAAYE,MAAM,EAAE,IAGxCL,GAAc,SAACV,EAAGgB,GACtB,OAAOA,EAAEC,eAAiBjB,EAAEiB,gBAGxBN,GAAW,SAACX,EAAGgB,GACjB,OAAOA,EAAEE,YAAclB,EAAEkB,aAGvBN,GAAc,SAACZ,EAAGgB,GACtB,OAAOA,EAAEG,eAAiBnB,EAAEmB,gBAGxB1B,GAAU,uCAAG,8BAAAO,EAAA,sEACMC,MA3ER,yDA2E0B,CACvCmB,QAAS,CACP,iBAAmB,0CAHN,cACXlB,EADW,gBAMEA,EAASC,OANX,cAMXC,EANW,yBAOVA,GAPU,2CAAH,qDAUVR,GAAa,uCAAG,8BAAAI,EAAA,sEACGC,MApFP,wDAmFI,cACdC,EADc,OAEdE,EAAOF,EAASC,OAFF,kBAIbC,GAJa,2CAAH,qDAObiB,GAAa,SAACrB,EAAGgB,GACrB,OAAOA,EAAEM,SAAWtB,EAAEsB,UAGlBzB,GAAmB,SAACO,GACxBpB,EAAcoB,EAAKU,KAAKO,MAQpB1B,GAAe,SAACS,GAOpB,IANA,IAAImB,EAAUnB,EAAKW,MAAMX,EAAKoB,OAAS,GAAIpB,EAAKoB,QAC5CC,EAAQ,GACR1D,EAAY,GACZE,EAAS,GACTE,EAAY,GAEPuD,EAAI,EAAGA,EAAIH,EAAQC,OAAQE,IAClCD,EAAME,KAAKJ,EAAQG,GAAGE,KAAKb,MAAM,EAAE,KACnChD,EAAU4D,KAAKJ,EAAQG,GAAGG,UAAYN,EAAQG,EAAE,GAAGG,WACnD5D,EAAO0D,KAAKJ,EAAQG,GAAGI,OAASP,EAAQG,EAAE,GAAGI,QAC7C3D,EAAUwD,KAAKJ,EAAQG,GAAGK,UAAYR,EAAQG,EAAE,GAAGK,WAMrD,OAHA7C,EAAa,CAACnB,YAAWE,SAAQE,YAAWsD,UAGrCrB,GAIHV,GAAoB,SAACU,GAgBzB,IAVA,IAEI4B,EACAC,EACAC,EACAC,EALAtD,EAAQ,GASRuD,GAHYhC,EAAKoB,OAGN,CAAC,YAAa,SAAU,cAC7BE,EAAI,EAAGA,EAAIU,EAASZ,OAASE,IAErCM,EAAQ5B,EAAKA,EAAKoB,OAAS,GAAGY,EAASV,IAAKtB,EAAKA,EAAKoB,OAAS,GAAGY,EAASV,IAC3EO,EAAY7B,EAAKA,EAAKoB,OAAS,GAAGY,EAASV,IAAMtB,EAAKA,EAAKoB,OAAS,GAAGY,EAASV,IAChFQ,EAAa9B,EAAKA,EAAKoB,OAAS,IAAIY,EAASV,IAAMtB,EAAKA,EAAKoB,OAAS,IAAIY,EAASV,IACnFS,EAAY/B,EAAKA,EAAKoB,OAAS,IAAIY,EAASV,IAAMtB,EAAKA,EAAKoB,OAAS,IAAIY,EAASV,IAGlF7C,EAAMuD,EAASV,IAAM,CAACM,QACRC,YACAC,aACFC,aAMd,OAFArC,QAAQC,IAAIlB,GACZC,EAASD,GACFuB,GAKT,OACE,yBAAKnD,UAAY,wBACf,kBAACO,EAAY6E,SAAb,CACEC,MAAO,CAAEA,MAAO,CAACvE,EAAWC,GACnBuE,OAAQ,CAACxE,EAAWC,GACpBwE,OAAQ,CAACvE,EAAQC,GACjBuE,OAAQ,CAACtE,EAAWC,GACpBsE,OAAQ,CAAC7E,EAAOC,GAChB6E,OAAQ,CAAC1D,EAAWC,GACpB0D,OAAQ,CAACvE,EAAcC,GACvBuE,OAAQ,CAACpE,EAAaC,GACtBoE,OAAQ,CAACvE,EAAeC,GACxBuE,OAAQ,CAACpE,EAAkBC,GAC3BoE,QAAS,CAACjE,EAAYC,GACtBiE,QAAS,CAAChE,EAAWC,GACrBgE,QAAS,CAACrE,EAAOC,KACzBnB,EAAMwF,YClJAC,EArCM,WAAO,IAAD,EAECC,qBAAW7F,GAA7B8E,EAFiB,EAEjBA,MAAOI,EAFU,EAEVA,OACVpF,EAHoB,YAGbgF,EAHa,MAIpBzE,EAJoB,YAIX6E,EAJW,MAOnBY,EAAgBhG,EAAIiG,KAAI,SAACnD,EAAMsB,GAAP,OAC5B,yBAAKzE,UAAY,YAAYuG,IAAK9B,GAChC,kBAAC,EAAD,CAAUrE,KAAM+C,EAAKhD,QAAQqG,MAAM,IAAK,GAAGC,KAAK,KAAMpG,IAAO8C,EAAKa,qBAMtE,OACE,yBAAKhE,UAAY,uCACf,yBAAKA,UAAY,SACf,yBAAKA,UAAY,8BAAjB,mBAEE,yBAAKA,UAAY,wBAEf,kBAAC,EAAD,CAAOK,IAAOO,EAAMoD,mBAIxB,yBAAKhE,UAAY,8BACdqG,MCUInC,EArCQ,WAAO,IAAD,EAEAkC,qBAAW7F,GAA9BiF,EAFmB,EAEnBA,OAAQC,EAFW,EAEXA,OACXpF,EAHsB,YAGfmF,EAHe,MAItB5E,EAJsB,YAIb6E,EAJa,MAQrBY,EAAgBhG,EAAIiG,KAAI,SAACnD,EAAMsB,GAAP,OAC5B,yBAAKzE,UAAY,YAAYuG,IAAK9B,GAChC,kBAAC,EAAD,CAAUrE,KAAM+C,EAAKhD,QAAQqG,MAAM,IAAK,GAAGC,KAAK,KAAMpG,IAAO8C,EAAKe,qBAMtE,OACE,yBAAKlE,UAAY,wCACf,yBAAKA,UAAY,SACf,yBAAKA,UAAY,8BAAjB,kBAEE,yBAAKA,UAAY,wBAEf,kBAAC,EAAD,CAAOK,IAAOO,EAAMsD,mBAIxB,yBAAKlE,UAAY,8BACdqG,MCQIK,EApCI,WAAO,IAAD,EAEIN,qBAAW7F,GAA9BgF,EAFe,EAEfA,OAAQE,EAFO,EAEPA,OACXpF,EAHkB,YAGXkF,EAHW,MAIlB3E,EAJkB,YAIT6E,EAJS,MAQjBY,EAAgBhG,EAAIiG,KAAI,SAACnD,EAAMsB,GAAP,OAC5B,yBAAKzE,UAAY,YAAYuG,IAAK9B,GAChC,kBAAC,EAAD,CAAUrE,KAAM+C,EAAKhD,QAAQqG,MAAM,IAAK,GAAGC,KAAK,KAAMpG,IAAO8C,EAAKc,kBAMtE,OACE,yBAAKjE,UAAY,wCAEf,yBAAKA,UAAY,8BAAjB,gBAEE,yBAAKA,UAAY,wBAEf,kBAAC,EAAD,CAAOK,IAAOO,EAAMqD,gBAGxB,yBAAKjE,UAAY,8BACdqG,KCDMM,EA1BO,SAACC,GAKrB,OAEI,yBAAK5G,UAAY,qBACf,yBAAKA,UAAY,aACf,kBAAC,EAAD,CAAOD,MAAM,mBACb,yBAAKC,UAAU,OACb,yBAAKA,UAAY,yBACf,yBAAKA,UAAY,OACf,kBAAC,EAAD,MACA,kBAAC6G,EAAD,MACA,kBAAC,EAAD,YClBhB,IAWeC,EAXI,WAEjB,OAEI,yBAAK9G,UAAY,2BCLP,IAAI2E,MAEHoC,iBCsBFC,EAzBQ,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,gBAEvB,OACE,yBAAKjH,UAAY,yDAEf,yBAAKA,UAAU,6BAA6BkH,cAAY,WACtD,2BAAQlH,UAAU,2BAA2BmH,QAAS,kBAAMF,EAAgB,eAC1E,2BAAOG,KAAK,UADd,cAGA,2BAAOpH,UAAU,oBAAoBmH,QAAS,kBAAMF,EAAgB,YAClE,2BAAOG,KAAK,UADd,WAGA,2BAAOpH,UAAU,oBAAoBmH,QAAS,kBAAMF,EAAgB,eAClE,2BAAOG,KAAK,UADd,iB,QCsDOC,EA/DE,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAEV5B,EAAUU,qBAAW7F,GAArBmF,OACA1D,EAH4B,YAGf0D,EAHe,QAKP/E,mBAAS,IALF,mBAK7B4G,EAL6B,KAKrBC,EALqB,OAMP7G,mBAAS,IANF,mBAM7B8G,EAN6B,KAMrBC,EANqB,KAOnCxF,qBAAU,WACRoF,EAAeA,EAAaK,cAE5BH,EAAUxF,EAAUwC,OACpBkD,EAAU1F,EAAUsF,MACnB,CAACtF,EAAWsF,IAEf,IAAMnE,EAAO,CACboE,OAAQA,EACRK,SAAU,CACR,CACEC,MAAO,gBACPC,MAAM,EACNC,YAAa,GACbC,gBAAiB,uBACjBC,YAAa,qBACbC,eAAgB,OAChBC,WAAY,GACZC,iBAAkB,EAClBC,gBAAiB,QACjBC,iBAAkB,qBAClBC,qBAAsB,OACtBC,iBAAkB,EAClBC,iBAAkB,EAClBC,0BAA2B,qBAC3BC,sBAAuB,sBACvBC,sBAAuB,EACvBC,YAAa,EACbC,eAAgB,GAChB3F,KAAMsE,KASV,OAGM,yBAAKzH,UAAU,oCACb,kBAAC,IAAD,CACAmD,KAAMA,EACN4F,MAAO,IACPC,OAAQ,IACRC,QAAS,CACPC,qBAAqB,OCkBlBC,EAvED,SAAC,GAAqD,EAApDvH,MAAqD,IAA9CmD,EAA6C,EAA7CA,MAAOC,EAAsC,EAAtCA,UAAWC,EAA2B,EAA3BA,WAAYC,EAAe,EAAfA,UAE5CS,EAAUS,qBAAW7F,GAArBoF,OACAC,EAAUQ,qBAAW7F,GAArBqF,OACAC,EAAUO,qBAAW7F,GAArBsF,OACAC,EAAUM,qBAAW7F,GAArBuF,OAL2D,YAO3CH,EAP2C,kBAQ7CC,EAR6C,kBAS1CC,EAT0C,kBAUvCC,EAVuC,MAclE,OACE,yBAAK9F,UAAY,yCAEf,yBAAKA,UAAY,aACf,yBAAKA,UAAY,kBACb,yBAAKA,UAAY,OACf,yBAAKA,UAAY,iCACZ+E,IAGP,yBAAK/E,UAAY,OACf,yBAAKA,UAAY,mCAAjB,WAKN,yBAAKA,UAAY,kBACf,yBAAKA,UAAY,OACf,yBAAKA,UAAW,iCACbgF,IAGL,yBAAKhF,UAAY,OACf,yBAAKA,UAAW,mCAAhB,eAKJ,yBAAKA,UAAY,kBACf,yBAAKA,UAAY,OACf,yBAAKA,UAAW,iCACfiF,IAGH,yBAAKjF,UAAY,OACf,yBAAKA,UAAW,mCAAhB,iBAKJ,yBAAKA,UAAY,kBACf,yBAAKA,UAAY,OACf,yBAAKA,UAAW,iCACbkF,IAGL,yBAAKlF,UAAY,OACf,yBAAKA,UAAW,mCAAhB,oBCWGoJ,EAjEM,WAAO,IAErBnD,EAAWG,qBAAW7F,GAAtB0F,QACArE,EAHoB,YAGXqE,EAHW,QAIatF,mBAAS,aAJtB,mBAIpB2G,EAJoB,KAINL,EAJM,OAKDtG,mBAAS,KALR,mBAKpBoE,EALoB,KAKbsE,EALa,OAMO1I,mBAAS,KANhB,mBAMpBqE,EANoB,KAMTsE,EANS,OAOS3I,mBAAS,KAPlB,mBAOpBsE,EAPoB,KAORsE,EAPQ,OAQO5I,mBAAS,KARhB,mBAQpBuE,EARoB,KAQTsE,EARS,KA0CzB,OARAtH,qBAAU,YAtBI,SAACuH,GAEX,IAAI,IAAIlD,KAAOkD,EACX,GAAGA,EAAIC,eAAenD,GAClB,OAAO,EAGf,OAAO,EAiBToD,CAAQ/H,IAXRyH,EAASzH,EAAM0F,GAAcvC,OAC7BuE,EAAa1H,EAAM0F,GAActC,WACjCuE,EAAc3H,EAAM0F,GAAcrC,YAClCuE,EAAa5H,EAAM0F,GAAcpC,YAQhBrC,QAAQC,IAAI,0BAC5B,CAACwE,EAAc1F,IAQd,yBAAK5B,UAAY,mBACf,yBAAKA,UAAY,aACf,kBAAC,EAAD,CAAOD,MAAM,kBACb,yBAAKC,UAAY,gBACf,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAgBiH,gBAAiBA,KAEnC,yBAAKjH,UAAY,OACb,kBAAC,EAAD,CAAO+E,MAAOA,EAAOC,UAAWA,EAAWC,WAAYA,EAAYC,UAAWA,KAElF,yBAAKlF,UAAY,mBACb,kBAAC,EAAD,CAAUsH,aAAcA,QCXvBsC,EArDD,WAAO,IAEZ7D,EAAWK,qBAAW7F,GAAtBwF,QAKD8D,EAPY,YAIC9D,EAJD,MAOYO,KAAI,SAACnD,EAAMsB,GAAP,OAChC,wBAAI8B,IAAO9B,GACT,wBAAIqF,MAAM,OAAOrF,EAAI,GACrB,gCAAMtB,EAAK4G,MAAX,KACA,gCAAM5G,EAAKkB,SAAX,KACA,gCAAMlB,EAAKjC,UAAYiC,EAAKjC,UAAY,IAAxC,KACA,gCAAMiC,EAAK6G,MAAX,KACA,gCAAM7G,EAAK8G,iBAAX,KACA,gCAAM9G,EAAK+G,cAAX,SAIeL,EAAW/F,MAAM,EAAE,IAItC,OAGE,yBAAK9D,UAAY,OACf,yBAAKA,UAAY,cACf,yBAAKA,UAAY,oBACf,2BAAOA,UAAY,oBACjB,+BACE,4BACE,wBAAI8J,MAAM,OAAV,KACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,aACA,wBAAIA,MAAM,OAAV,aACA,wBAAIA,MAAM,OAAV,UACA,wBAAIA,MAAM,OAAV,iBACA,wBAAIA,MAAM,OAAV,gBAGJ,+BACGD,EAAW/F,MAAM,EAAE,UC7BnBqG,EAZU,WACvB,OAEE,yBAAKnK,UAAY,WACf,yBAAKA,UAAY,aACf,kBAAC,EAAD,CAAOD,MAAM,mBACb,kBAAC,EAAD,SCqBOqK,EA/BD,SAAC,GAAuB,IAAtBrK,EAAqB,EAArBA,MAAOsK,EAAc,EAAdA,IAAKC,EAAS,EAATA,IAGR,OAAD,OAASA,EAAT,KAQjB,OACE,yBAAKtK,UAAY,OACf,yBAAKA,UAAY,aACf,uBAAGuK,KAAMF,EAAKG,OAAO,UACnB,yBAAKxK,UAAY,cACb,yBAAKA,UAAY,kBACf,yBAAKyK,MAVF,CACfC,OAAQ,mBAS0BC,IAAKL,EAAKvB,MAAQ,MAAMC,OAAS,SAEzD,yBAAKhJ,UAAY,uBACf,0BAAMA,UAAY,eAAqBD,QC0BxC6K,EAzCC,WAEd,IAFoB,EAIIjK,mBAAS,IAJb,mBAIfkK,EAJe,KAIRC,EAJQ,KAMpB5I,qBAAU,WACR6I,MACC,IAEH,IAAMA,EAAQ,uCAAG,8BAAAhI,EAAA,sEACQC,MATN,yDAQF,cACTC,EADS,gBAEIA,EAASC,OAFb,OAETC,EAFS,OAGf2H,EAAS3H,EAAKA,KAAK+C,SAASpC,MAAM,EAAG,IAHtB,2CAAH,qDAMVkH,EAAYH,EAAMvE,KAAI,SAACuE,EAAOpG,GAAR,OAExB,kBAAC,EAAD,CAAO8B,IAAK9B,EACL1E,MAAO8K,EAAM1H,KAAKpD,MAClBsK,IAAKQ,EAAM1H,KAAKkH,IAChBC,IAAKO,EAAM1H,KAAK8H,eAMzB,OACE,yBAAKjL,UAAY,sDACf,kBAAC,EAAD,CAAOD,MAAM,kBACZiL,ICLQE,EApBH,WAEV,OACE,yBAAKlL,UAAU,OACX,yBAAKA,UAAU,mBACb,kBAAC,EAAD,MACA,yBAAKA,UAAY,OAEf,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEF,kBAAC,EAAD,UCbQmL,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3J,MAAK,SAAA4J,GACJA,EAAaC,gBAEd3J,OAAM,SAAAC,GACLM,QAAQN,MAAMA,EAAM2J,a","file":"static/js/main.74d50b17.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n\r\nconst PageTitle = ({title}) => {\r\n\r\n  return(\r\n\r\n      <div className = \"page-title\">\r\n        {title}\r\n      </div>\r\n\r\n\r\n  )\r\n}\r\n\r\nexport default PageTitle;\r\n","import React from 'react';\r\nimport PageTitle from '../PageTitle';\r\n\r\nconst TitleBar = () => {\r\n\r\n\r\n\r\n  return(\r\n    <div className = \"row page-title-row \">\r\n      <div className = \"col-md-3 offset-md-4\">\r\n        <PageTitle title=\"Covid-19 Tracker\"/>\r\n      </div>\r\n    </div>\r\n\r\n\r\n  )\r\n\r\n\r\n}\r\n\r\nexport default TitleBar;\r\n","import React from 'react';\r\nimport './App.css';\r\n\r\nconst Title = ({title}) => {\r\n\r\n  return(\r\n    <div className = \"row title-row\">\r\n      <div className = \"col-12 col-md-12 title-text\">\r\n        {title}\r\n      </div>\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nexport default Title;\r\n","import React from 'react';\r\nimport '../App.css';\r\n\r\nconst Country = ({name, num}) => {\r\n\r\n  return (\r\n    <div className = \"row sub-title text-right\">\r\n      <div className = \"col-6 col-md-6 text-left d-flex align-items-end\">\r\n        {name === \"Russian Federation\" ? \"Russia\" : name}\r\n      </div>\r\n      <div className = \"col-6 col-md-6 text-right sub-num\">\r\n        <span className = \"pull-right\">\r\n          {num}\r\n        </span>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Country\r\n","import React from 'react';\r\nimport '../App.css';\r\n\r\nconst Total = ({num}) => {\r\n\r\n  return (\r\n\r\n      <div className = \"row justify-content-center title-num\">\r\n        <div className = \"col-md-12 text-center\">\r\n          {num}\r\n        </div>\r\n      </div>\r\n\r\n  );\r\n}\r\n\r\nexport default Total\r\n","import React, {useEffect, useState, createContext} from 'react';\r\n\r\nimport {getDateISO} from './Date';\r\n\r\nexport const DataContext = createContext();\r\n\r\nexport const DataProvider = (props) => {\r\n\r\n\r\n\r\n  let SUMMARY_DATA = \"https://api.covid19api.com/summary\";\r\n  let GRAPH_DATA = \"https://api.covid19api.com/total/country/united-states\";\r\n  let STATES_DATA = \"https://api.covidtracking.com/v1/states/current.json\";\r\n\r\n\r\n  let [total, setTotal] = useState({});\r\n  let [confirmed, setConfirmed] = useState([]);\r\n  let [deaths, setDeaths] = useState([]);\r\n  let [recovered, setRecovered] = useState([]);\r\n  let [cases, setCases] = useState({});\r\n\r\n\r\n  let [confirmToday, setConfirmToday] = useState();\r\n  let [confirmThirty, setConfirmThirty] = useState();\r\n  let [confirmTen,  setConfirmTen] = useState();\r\n  let [confirmYesterday, setConfirmYesterday] = useState();\r\n\r\n  let [stats, setStats] = useState({});\r\n  let [statesData, setStatesData] = useState([]);\r\n  let [graphData, setGraphData] = useState({});\r\n\r\n  useEffect(() => {\r\n    getSummary()\r\n      .then(handleResponse)\r\n      .catch(error)\r\n\r\n    getDataSet()\r\n      .then(displayDailyStats)\r\n      .then(graphDataSet)\r\n      .catch(error)\r\n\r\n    getStatesData()\r\n      .then(handleStatesData)\r\n      .catch(error);\r\n      console.log(\"Use Effect!\");\r\n  }, [])\r\n\r\n  const getSummary = async () => {\r\n    const response = await fetch(SUMMARY_DATA);\r\n    const data = await response.json();\r\n\r\n    return data\r\n  }\r\n\r\n  const handleResponse = (data) => {\r\n    console.log(\"Summary Succesfully Loaded!\");\r\n    let countries = data.Countries;\r\n    let gLobal = data.Global;\r\n\r\n    setConfirmed(getTop(countries, byConfirmed ));\r\n    setDeaths(getTop(countries, byDeaths ));\r\n    setRecovered(getTop(countries, byRecovered ));\r\n    setTotal(gLobal);\r\n  }\r\n\r\n  const error = (error) => {\r\n    console.log(\"Error! \" + error);\r\n  }\r\n\r\n  const getTop = (countries, byCategory) => {\r\n      return countries.sort(byCategory).slice(0,5);\r\n  };\r\n\r\n  const byConfirmed = (a, b) => {\r\n    return b.TotalConfirmed - a.TotalConfirmed;\r\n  }\r\n\r\n  const byDeaths = (a, b) => {\r\n      return b.TotalDeaths - a.TotalDeaths;\r\n  }\r\n\r\n  const byRecovered = (a, b) => {\r\n    return b.TotalRecovered - a.TotalRecovered;\r\n  }\r\n\r\n  const getDataSet = async () => {\r\n    const response = await fetch(GRAPH_DATA, {\r\n      headers: {\r\n        'X-Access-Token' : 'd908455c-8985-4153-9df2-1f9312db921c'\r\n      }\r\n    });\r\n    const data = await response.json();\r\n    return data;\r\n  }\r\n\r\n  const getStatesData = async () => {\r\n    const response = await fetch(STATES_DATA);\r\n    const data = response.json();\r\n\r\n    return data;\r\n  }\r\n\r\n  const byPositive = (a, b) => {\r\n    return b.positive - a.positive;\r\n  }\r\n\r\n  const handleStatesData = (data) => {\r\n    setStatesData(data.sort(byPositive));\r\n  }\r\n\r\n  const getDataPoints = (element) => {\r\n\r\n\r\n  }\r\n\r\n  const graphDataSet = (data) => {\r\n    let dataSet = data.slice(data.length - 31, data.length);\r\n    let dates = [];\r\n    let confirmed = [];\r\n    let deaths = [];\r\n    let recovered = [];\r\n\r\n    for (let i = 1; i < dataSet.length; i++){\r\n      dates.push(dataSet[i].Date.slice(5,10));\r\n      confirmed.push(dataSet[i].Confirmed - dataSet[i-1].Confirmed)\r\n      deaths.push(dataSet[i].Deaths - dataSet[i-1].Deaths)\r\n      recovered.push(dataSet[i].Recovered - dataSet[i-1].Recovered);\r\n    }\r\n\r\n    setGraphData({confirmed, deaths, recovered, dates})\r\n\r\n\r\n    return data\r\n  }\r\n\r\n\r\n  const displayDailyStats = (data) => {\r\n\r\n\r\n    let confirmed = {};\r\n    let deaths = {};\r\n    let recovered = {};\r\n    let stats = {}\r\n    let ob = {}\r\n    let today;\r\n    let yesterday;\r\n    let tenDaysAgo;\r\n    let aMonthAgo;\r\n    let lastIndex = data.length - 1;\r\n\r\n\r\n    let category = [\"Confirmed\", \"Deaths\", \"Recovered\"]\r\n    for ( let i = 0; i < category.length ; i++){\r\n\r\n      today = data[data.length - 1][category[i]]- data[data.length - 2][category[i]];\r\n      yesterday = data[data.length - 2][category[i]] - data[data.length - 3][category[i]]\r\n      tenDaysAgo = data[data.length - 10][category[i]] - data[data.length - 11][category[i]]\r\n      aMonthAgo = data[data.length - 30][category[i]] - data[data.length - 31][category[i]]\r\n\r\n\r\n      stats[category[i]] = {today,\r\n                    yesterday,\r\n                    tenDaysAgo,\r\n                  aMonthAgo}\r\n\r\n\r\n    }\r\n    console.log(stats);\r\n    setStats(stats);\r\n    return data;\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <div className = \"col-md-6 offset-md-1\">\r\n      <DataContext.Provider\r\n        value={{ value: [confirmed, setConfirmed],\r\n                 value1: [confirmed, setConfirmed],\r\n                 value2: [deaths, setDeaths],\r\n                 value3: [recovered, setRecovered],\r\n                 value4: [total, setTotal],\r\n                 value5: [graphData, setGraphData],\r\n                 value6: [confirmToday, setConfirmToday],\r\n                 value7: [confirmTen,  setConfirmTen],\r\n                 value8: [confirmThirty, setConfirmThirty],\r\n                 value9: [confirmYesterday, setConfirmYesterday],\r\n                 value10: [statesData, setStatesData],\r\n                 value11: [graphData, setGraphData],\r\n                 value12: [stats, setStats]}}>\r\n        {props.children}\r\n      </DataContext.Provider>\r\n    </div>\r\n  );\r\n}\r\n","import React, {useContext} from 'react';\r\nimport Country from \"./Country\";\r\nimport Total from \"./Total\";\r\nimport {DataContext} from \"../DataProvider\"\r\nimport '../App.css';\r\n\r\n\r\nconst TotalConfirm = () => {\r\n\r\n  const { value, value4 } = useContext(DataContext);\r\n  var [num] = value;\r\n  var [total] = value4;\r\n\r\n\r\n  const listCountries = num.map((data, i) =>\r\n    <div className = \"col-md-12\" key={i}>\r\n      <Country  name={data.Country.split(\" \", 2).join(\" \")} num = {data.TotalConfirmed}   />\r\n    </div>\r\n  );\r\n\r\n\r\n\r\n  return(\r\n    <div className = \"col-8 offset-2 col-md-4 offset-md-0\">\r\n      <div className = \"panel\">\r\n        <div className = \"row justify-content-center\">\r\n          Total Confirmed:\r\n          <div className = \"col-md-12 title-name\">\r\n\r\n            <Total num = {total.TotalConfirmed} />\r\n          </div>\r\n\r\n        </div>\r\n        <div className = \"row justify-content-center\">\r\n          {listCountries}\r\n        </div>\r\n\r\n      </div>\r\n    </div>\r\n\r\n  );\r\n\r\n}\r\n\r\nexport default TotalConfirm;\r\n","import React, {useContext} from 'react';\r\nimport Country from \"./Country\";\r\nimport Total from \"./Total\";\r\nimport {DataContext} from \"../DataProvider\"\r\nimport '../App.css';\r\n\r\n\r\nconst TotalRecovered = () => {\r\n\r\n  const { value3, value4 } = useContext(DataContext);\r\n  var [num] = value3;\r\n  var [total] = value4;\r\n\r\n\r\n\r\n  const listCountries = num.map((data, i) =>\r\n    <div className = \"col-md-12\" key={i}>\r\n      <Country  name={data.Country.split(\" \", 2).join(\" \")} num = {data.TotalRecovered}   />\r\n    </div>\r\n  );\r\n\r\n\r\n\r\n  return(\r\n    <div className = \"col-8 offset-2 col-md-4 offset-md-0 \">\r\n      <div className = \"panel\">\r\n        <div className = \"row justify-content-center\">\r\n          Total Recovered\r\n          <div className = \"col-md-12 title-name\">\r\n\r\n            <Total num = {total.TotalRecovered} />\r\n          </div>\r\n\r\n        </div>\r\n        <div className = \"row justify-content-center\">\r\n          {listCountries}\r\n        </div>\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n}\r\n\r\nexport default TotalRecovered;\r\n","import React, {useContext} from 'react';\r\nimport Country from \"./Country\";\r\nimport Total from \"./Total\";\r\nimport {DataContext} from \"../DataProvider\"\r\nimport '../App.css';\r\n\r\n\r\nconst TotalDeath = () => {\r\n\r\n  const { value2, value4 } = useContext(DataContext);\r\n  var [num] = value2;\r\n  var [total] = value4;\r\n\r\n\r\n\r\n  const listCountries = num.map((data, i) =>\r\n    <div className = \"col-md-12\" key={i}>\r\n      <Country  name={data.Country.split(\" \", 2).join(\" \")} num = {data.TotalDeaths}   />\r\n    </div>\r\n  );\r\n\r\n\r\n\r\n  return(\r\n    <div className = \"col-8 offset-2 col-md-4 offset-md-0 \">\r\n\r\n      <div className = \"row justify-content-center\">\r\n        Total Deaths:\r\n        <div className = \"col-md-12 title-name\">\r\n\r\n          <Total num = {total.TotalDeaths} />\r\n        </div>\r\n      </div>\r\n      <div className = \"row justify-content-center\">\r\n        {listCountries}\r\n      </div>\r\n\r\n    </div>\r\n\r\n  );\r\n\r\n}\r\n\r\nexport default TotalDeath;\r\n","import React from 'react';\r\nimport Title from '../Title'\r\nimport TotalConfirm from './TotalConfirm';\r\nimport TotalRecover from './TotalRecover';\r\nimport TotalDeath   from './TotalDeath';\r\n\r\n\r\nconst GlobalSummary = (items) => {\r\n\r\n\r\n\r\n\r\n  return (\r\n    \r\n      <div className = \"row  box summary \">\r\n        <div className = \"col-md-12\">\r\n          <Title title=\"Global Summary\"/>\r\n          <div className=\"row\">\r\n            <div className = \"col-md-12 offset-md-0\">\r\n              <div className = \"row\">\r\n                <TotalConfirm />\r\n                <TotalRecover />\r\n                <TotalDeath />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    \r\n  )\r\n}\r\n\r\n\r\nexport default GlobalSummary;\r\n","import React from 'react';\r\nimport {getCurrentDate} from './getCurrentDate';\r\n\r\n\r\nconst TodaysDate = () => {\r\n\r\n  return (\r\n\r\n      <div className = \"col-md-4 col-lg-3 date\">\r\n        {getCurrentDate()}\r\n      </div>\r\n\r\n  );\r\n}\r\n\r\nexport default TodaysDate;\r\n","\r\nexport function getCurrentDate ()  {\r\n\r\n  let newDate = new Date();\r\n\r\n  return newDate.toDateString();\r\n\r\n};\r\n","import React from 'react';\r\n\r\nconst CategoryToggle = ({setCategoryType}) => {\r\n\r\n  return (\r\n    <div className = \"col-10 offset-1 col-md-8 offset-md-0 col-lg-9 toggle \">\r\n\r\n      <div className=\"btn-group btn-group-toggle\" data-toggle=\"buttons\">\r\n        <label  className=\"btn btn-secondary active\" onClick={() => setCategoryType(\"Confirmed\")}>\r\n          <input type=\"radio\" /> Confirmed\r\n        </label>\r\n        <label className=\"btn btn-secondary\" onClick={() => setCategoryType(\"Deaths\")}>\r\n          <input type=\"radio\"/> Deaths\r\n        </label>\r\n        <label className=\"btn btn-secondary\" onClick={() => setCategoryType(\"Recovered\")}>\r\n          <input type=\"radio\"/> Recovered\r\n        </label>\r\n      </div>\r\n\r\n\r\n    </div>\r\n\r\n\r\n  )\r\n\r\n}\r\n\r\nexport default CategoryToggle;\r\n","import React, { useState, useEffect, useContext } from \"react\";\r\nimport {Line} from \"react-chartjs-2\";\r\nimport {DataContext} from \"../DataProvider\"\r\n\r\n\r\nconst BarChart = ({categoryType}) => {\r\n\r\n  const {value5} = useContext(DataContext);\r\n  const [graphData] = value5;\r\n\r\n  let [ labels, setLabels ] = useState([]);\r\n  let [ points, setPoints ] = useState([]);\r\n  useEffect(() => {\r\n    categoryType = categoryType.toLowerCase()\r\n\r\n    setLabels(graphData.dates);\r\n    setPoints(graphData[categoryType]);\r\n  }, [graphData, categoryType])\r\n\r\n  const data = {\r\n  labels: labels,\r\n  datasets: [\r\n    {\r\n      label: \"United States\",\r\n      fill: true,\r\n      lineTension: 0.1,\r\n      backgroundColor: \"rgba(75,192,192,0.4)\",\r\n      borderColor: \"rgba(75,192,192,1)\",\r\n      borderCapStyle: \"butt\",\r\n      borderDash: [],\r\n      borderDashOffset: 0.0,\r\n      borderJoinStyle: \"miter\",\r\n      pointBorderColor: \"rgba(75,192,192,1)\",\r\n      pointBackgroundColor: \"#fff\",\r\n      pointBorderWidth: 1,\r\n      pointHoverRadius: 5,\r\n      pointHoverBackgroundColor: \"rgba(75,192,192,1)\",\r\n      pointHoverBorderColor: \"rgba(220,220,220,1)\",\r\n      pointHoverBorderWidth: 2,\r\n      pointRadius: 1,\r\n      pointHitRadius: 10,\r\n      data: points\r\n    }\r\n  ]\r\n};\r\n\r\n\r\n\r\n\r\n\r\n  return (\r\n\r\n\r\n        <div className=\"col-md-12 offset-md-0 text-right\">\r\n          <Line\r\n          data={data}\r\n          width={100}\r\n          height={200}\r\n          options={{\r\n            maintainAspectRatio: false\r\n          }}\r\n        />\r\n        </div>\r\n\r\n\r\n  )\r\n}\r\n\r\nexport default BarChart;\r\n","import React, {useContext} from 'react';\r\nimport {DataContext} from \"../DataProvider\"\r\nimport {getCurrentDate} from './getCurrentDate';\r\nimport TodaysDate from './TodaysDate';\r\nimport CategoryToggle from './CategoryToggle';\r\n\r\nconst Daily = ({stats, today, yesterday, tenDaysAgo, aMonthAgo}) => {\r\n\r\n  const {value6} = useContext(DataContext);\r\n  const {value7} = useContext(DataContext);\r\n  const {value8} = useContext(DataContext);\r\n  const {value9} = useContext(DataContext);\r\n\r\n  const [confirmToday] = value6;\r\n  const [confirmTen] = value7;\r\n  const [confirmThirty] = value8;\r\n  const [confirmYesterday] = value9;\r\n\r\n\r\n\r\n  return (\r\n    <div className = \"col-12 offset-0 col-md-12 offset-md-0\">\r\n\r\n      <div className = \"row daily\">\r\n        <div className = \"col-3 col-md-3\">\r\n            <div className = \"row\">\r\n              <div className = \"col-md-12 text-center sub-num\">\r\n                  {today}\r\n              </div>\r\n            </div>\r\n            <div className = \"row\">\r\n              <div className = \"col-md-12 text-center sub-title\">\r\n                Today\r\n              </div>\r\n            </div>\r\n        </div>\r\n        <div className = \"col-3 col-md-3\">\r\n          <div className = \"row\">\r\n            <div className =\"col-md-12 text-center sub-num\">\r\n              {yesterday}\r\n            </div>\r\n          </div>\r\n          <div className = \"row\">\r\n            <div className =\"col-md-12 text-center sub-title\">\r\n              Yesterday\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className = \"col-3 col-md-3\">\r\n          <div className = \"row\">\r\n            <div className =\"col-md-12 text-center sub-num\">\r\n            {tenDaysAgo}\r\n            </div>\r\n          </div>\r\n          <div className = \"row\">\r\n            <div className =\"col-md-12 text-center sub-title\">\r\n              10 Days Ago\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className = \"col-3 col-md-3\">\r\n          <div className = \"row\">\r\n            <div className =\"col-md-12 text-center sub-num\">\r\n              {aMonthAgo}\r\n            </div>\r\n          </div>\r\n          <div className = \"row\">\r\n            <div className =\"col-md-12 text-center sub-title\">\r\n            30 Days ago\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Daily\r\n","import React, {useState, useEffect, useContext} from 'react';\r\nimport Title from '../Title';\r\nimport TodaysDate from './TodaysDate';\r\nimport CategoryToggle from './CategoryToggle';\r\nimport BarChart from './BarChart';\r\nimport Daily from './Daily';\r\nimport {DataContext} from \"../DataProvider\"\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst DailyTracker = () => {\r\n\r\n  let {value12} = useContext(DataContext);\r\n  let [stats] = value12;\r\n  let [categoryType, setCategoryType] = useState(\"Confirmed\");\r\n  let [today, setToday] = useState(\"-\");\r\n  let [yesterday, setYesterday] = useState(\"-\")\r\n  let [tenDaysAgo, setTenDaysAgo] = useState(\"-\")\r\n  let [aMonthAgo, setAMonthAgo] = useState(\"-\")\r\n\r\n\r\n\r\n  let isEmpty = (obj) => {\r\n\r\n      for(var key in obj) {\r\n          if(obj.hasOwnProperty(key))\r\n              return false;\r\n      }\r\n\r\n      return true;\r\n  }\r\n\r\n\r\n  let displayStats = () => {\r\n\r\n    setToday(stats[categoryType].today);\r\n    setYesterday(stats[categoryType].yesterday);\r\n    setTenDaysAgo(stats[categoryType].tenDaysAgo);\r\n    setAMonthAgo(stats[categoryType].aMonthAgo);\r\n\r\n\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n\r\n    isEmpty(stats) ? console.log(\"Daily Stats is Empty\") : displayStats(categoryType);\r\n  }, [categoryType, stats]);\r\n\r\n\r\n\r\n\r\n  return (\r\n    \r\n    \r\n      <div className = \"row box details\">\r\n        <div className = \"col-md-12\">\r\n          <Title title=\"Daily Tracker\"/>\r\n          <div className = \"row date-row\">\r\n            <TodaysDate />\r\n            <CategoryToggle setCategoryType={setCategoryType} />\r\n          </div>\r\n          <div className = \"row\">\r\n              <Daily today={today} yesterday={yesterday} tenDaysAgo={tenDaysAgo} aMonthAgo={aMonthAgo} />\r\n          </div>\r\n          <div className = \"row with-margin\">\r\n              <BarChart categoryType={categoryType}/>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n  )\r\n}\r\n\r\n\r\nexport default DailyTracker;\r\n","import React, {useContext} from 'react';\r\nimport {DataContext} from \"../DataProvider\"\r\n\r\n\r\n\r\nconst Table = () => {\r\n\r\n  const {value10} = useContext(DataContext);\r\n\r\n  var [statesData] = value10;\r\n\r\n\r\n  const listStates = statesData.map((data, i) =>\r\n    <tr key = {i}>\r\n      <th scope=\"row\">{i + 1}</th>\r\n      <td> {data.state} </td>\r\n      <td> {data.positive} </td>\r\n      <td> {data.recovered ? data.recovered : \"-\"} </td>\r\n      <td> {data.death} </td>\r\n      <td> {data.positiveIncrease} </td>\r\n      <td> {data.deathIncrease} </td>\r\n    </tr>\r\n  );\r\n\r\n  let topTenStates = listStates.slice(0,10);\r\n\r\n\r\n\r\n  return (\r\n\r\n\r\n    <div className = \"row\">\r\n      <div className = \"col-md-12 \">\r\n        <div className = \"table-responsive\">\r\n          <table className = \"table text-right\">\r\n            <thead>\r\n              <tr>\r\n                <th scope=\"col\">#</th>\r\n                <th scope=\"col\">State</th>\r\n                <th scope=\"col\">Confirmed</th>\r\n                <th scope=\"col\">Recovered</th>\r\n                <th scope=\"col\">Deaths</th>\r\n                <th scope=\"col\">New Confirmed</th>\r\n                <th scope=\"col\">New Deaths</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {listStates.slice(0,10)}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default Table;\r\n","import React from 'react';\r\nimport Table from './Table';\r\nimport Title from '../Title'\r\nimport UpdatedLast from './UpdatedLast';\r\n\r\n\r\nconst UnitedStatesData = () => {\r\n  return (\r\n\r\n    <div className = \"row box\">\r\n      <div className = \"col-md-12\">\r\n        <Title title=\"State by State\"/>\r\n        <Table />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UnitedStatesData;\r\n","import React from 'react';\r\n\r\nconst Posts = ({title, url, img}) => {\r\n\r\n  const postStyle = {\r\n    backgroundImage: `url(${img})`,\r\n\r\n  }\r\n\r\n  const imgStyle = {\r\n    border: '2px solid white'\r\n  }\r\n\r\n  return (\r\n    <div className = \"row\">\r\n      <div className = \"col-lg-12\">\r\n        <a href={url} target=\"_blank\">\r\n          <div className = \"row posts \">\r\n              <div className = \"col-4 col-md-5\">\r\n                <img style={imgStyle} src={img} width = \"100\" height = \"100\"></img>\r\n              </div>\r\n              <div className = \"h-50 col-8 col-md-7\">\r\n                <span className = \"post-title\"></span>{title}\r\n              </div>\r\n          </div>\r\n        </a>\r\n      </div>\r\n    </div>\r\n\r\n  )\r\n\r\n}\r\n\r\nexport default Posts;\r\n","import React, {useState, useEffect}  from 'react';\r\nimport Posts from './Posts';\r\nimport Title from '../Title';\r\n\r\n\r\n\r\n\r\nconst SideBar = () => {\r\n\r\n  const REDDIT_API = \"https://www.reddit.com/r/coronavirus/hot.json?limit=6\"\r\n\r\n  let [posts, setPosts] = useState([]);\r\n\r\n  useEffect(() => {\r\n    getPosts();\r\n  }, []);\r\n\r\n  const getPosts = async () => {\r\n    const response = await fetch (REDDIT_API);\r\n    const data = await response.json();\r\n    setPosts(data.data.children.slice(2, 7));\r\n  }\r\n\r\n  let listPosts = posts.map((posts, i) =>\r\n\r\n    <Posts key={i}\r\n           title={posts.data.title}\r\n           url={posts.data.url}\r\n           img={posts.data.thumbnail}\r\n    />\r\n\r\n  );\r\n\r\n\r\n  return (\r\n    <div className = \"h-75 col-md-5 offset-md-0 col-lg-3 offset-lg-1 box\">\r\n      <Title title=\"Covid-19 News\"/>\r\n      {listPosts}\r\n    </div>\r\n\r\n  )\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport default SideBar;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport TitleBar from './TitleBar/TitleBar';\r\nimport NavBar from './NavBar/NavBar';\r\nimport GlobalSummary from './GlobalSummary/GlobalSummary';\r\nimport DailyTracker from './DailyTracker/DailyTracker';\r\nimport Table from './UnitedStatesData/Table';\r\nimport UnitedStatesData from './UnitedStatesData/UnitedStatesData';\r\nimport SideBar from './SideBar/SideBar';\r\nimport {DataProvider} from \"./DataProvider\";\r\n\r\n\r\nconst App = () => {\r\n\r\n  return (\r\n    <div className=\"App\">\r\n        <div className=\"container-fluid\">\r\n          <TitleBar/>\r\n          <div className = \"row\">\r\n\r\n            <DataProvider>\r\n              <GlobalSummary />\r\n              <DailyTracker />\r\n              <UnitedStatesData/>\r\n            </DataProvider>\r\n            <SideBar />\r\n          </div>\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}