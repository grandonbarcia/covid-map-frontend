{"version":3,"sources":["Title.js","GlobalSummary/Country.js","GlobalSummary/Total.js","DataProvider.js","GlobalSummary/TotalConfirm.js","GlobalSummary/TotalRecover.js","GlobalSummary/TotalDeath.js","GlobalSummary/GlobalSummary.js","DailyTracker/TodaysDate.js","DailyTracker/getCurrentDate.js","DailyTracker/CategoryToggle.js","DailyTracker/BarChart.js","DailyTracker/Daily.js","DailyTracker/DailyTracker.js","USData/Table.js","USData/MapChart/MapChart.js","USData/USData.js","SideBar/Posts.js","SideBar/SideBar.js","App.js","serviceWorker.js","index.js","img/virus.png"],"names":["Title","title","className","Country","name","num","Total","DataContext","createContext","DataProvider","props","useState","total","setTotal","confirmed","setConfirmed","deaths","setDeaths","recovered","setRecovered","confirmToday","setConfirmToday","confirmThirty","setConfirmThirty","confirmTen","setConfirmTen","confirmYesterday","setConfirmYesterday","stats","setStats","globalSummary","statesData","setStatesData","graphData","setGraphData","useEffect","getSummary","then","handleResponse","catch","error","getDataSet","displayDailyStats","graphDataSet","getStatesData","handleStatesData","a","fetch","response","json","data","countries","Countries","Global","getTop","byConfirmed","byDeaths","byRecovered","console","log","byCategory","sort","slice","b","TotalConfirmed","TotalDeaths","TotalRecovered","headers","byPositive","positive","dataSet","length","dates","i","push","Date","Confirmed","Deaths","Recovered","today","yesterday","tenDaysAgo","aMonthAgo","category","Provider","value","value1","value2","value3","value4","value5","value6","value7","value8","value9","value10","value11","value12","children","TotalConfirm","useContext","listCountries","map","key","split","join","TotalDeath","GlobalSummary","items","TotalRecover","TodaysDate","toDateString","CategoryToggle","setCategoryType","data-toggle","onClick","type","BarChart","categoryType","labels","setLabels","points","setPoints","toLowerCase","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","width","height","options","maintainAspectRatio","Daily","DailyTracker","setToday","setYesterday","setTenDaysAgo","setAMonthAgo","obj","hasOwnProperty","isEmpty","Table","listStates","scope","state","death","positiveIncrease","deathIncrease","offsets","VT","NH","MA","RI","CT","NJ","DE","MD","DC","MapChart","setState","setPosition","setShowBox","projection","geography","geographies","geo","cur","allStates","find","s","val","id","rsmKey","stroke","onMouseEnter","e","properties","initials","nativeEvent","offsetX","offsetY","centroid","geoCentroid","Object","keys","indexOf","coordinates","y","fontSize","textAnchor","subject","dx","dy","x","alignmentBaseline","USData","position","setStateName","newConfirmed","newDeath","stateData","setStateData","showBox","window","innerWidth","setWidth","innerHeight","setHeight","style","padding","visibility","border","left","top","updateWindowSize","addEventListener","removeEventListener","Posts","url","img","href","target","src","SideBar","posts","setPosts","getPosts","listPosts","thumbnail","Virus","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"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","file":"static/js/main.a2449dd5.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n\r\nconst Title = ({ title }) => {\r\n\r\n  return (\r\n    <div className=\"row mb-3\">\r\n      <div className=\"col-12 col-md-12\">\r\n        <h5 className=\"panel-title-left\">{title}</h5>\r\n      </div>\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nexport default Title;\r\n","import React from 'react';\r\nimport '../App.css';\r\n\r\nconst Country = ({name, num}) => {\r\n\r\n  return (\r\n    <div className = \"row sub-title text-right\">\r\n      <div className = \"col-6 col-md-6 text-left d-flex align-items-end\">\r\n        {name === \"Russian Federation\" ? \"Russia\" : name}\r\n      </div>\r\n      <div className = \"col-6 col-md-6 text-right sub-num\">\r\n        <span className = \"pull-right\">\r\n          {num}\r\n        </span>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Country\r\n","import React from 'react';\r\nimport '../App.css';\r\n\r\nconst Total = ({num}) => {\r\n\r\n  return (\r\n\r\n      <div className = \"row justify-content-center title-num\">\r\n        <div className = \"col-md-12 text-center\">\r\n          {num}\r\n        </div>\r\n      </div>\r\n\r\n  );\r\n}\r\n\r\nexport default Total\r\n","import React, { useEffect, useState, createContext } from 'react';\r\n\r\nimport { getDateISO } from './Date';\r\n\r\nexport const DataContext = createContext();\r\n\r\nexport const DataProvider = (props) => {\r\n\r\n\r\n\r\n  let SUMMARY_DATA = \"https://api.covid19api.com/summary\";\r\n  let GRAPH_DATA = \"https://api.covid19api.com/total/country/united-states\";\r\n  let STATES_DATA = \"https://api.covidtracking.com/v1/states/current.json\";\r\n\r\n\r\n  let [total, setTotal] = useState({});\r\n  let [confirmed, setConfirmed] = useState([]);\r\n  let [deaths, setDeaths] = useState([]);\r\n  let [recovered, setRecovered] = useState([]);\r\n  let [cases, setCases] = useState({});\r\n\r\n\r\n  let [confirmToday, setConfirmToday] = useState();\r\n  let [confirmThirty, setConfirmThirty] = useState();\r\n  let [confirmTen, setConfirmTen] = useState();\r\n  let [confirmYesterday, setConfirmYesterday] = useState();\r\n\r\n  let [stats, setStats] = useState({});\r\n  let [globalSummary, setGlobalSummary] = useState({});\r\n  let [statesData, setStatesData] = useState([]);\r\n  let [graphData, setGraphData] = useState({});\r\n\r\n  useEffect(() => {\r\n    getSummary()\r\n      .then(handleResponse)\r\n      .catch(error)\r\n\r\n    getDataSet()\r\n      .then(displayDailyStats)\r\n      .then(graphDataSet)\r\n      .catch(error)\r\n\r\n    getStatesData()\r\n      .then(handleStatesData)\r\n      .catch(error);\r\n\r\n  }, [])\r\n\r\n  const getSummary = async () => {\r\n    const response = await fetch(SUMMARY_DATA);\r\n    const data = await response.json();\r\n    return data\r\n  }\r\n\r\n  const handleResponse = (data) => {\r\n\r\n    let countries = data.Countries;\r\n    let total = data.Global;\r\n    setConfirmed(getTop(countries, byConfirmed));\r\n    setDeaths(getTop(countries, byDeaths));\r\n    setRecovered(getTop(countries, byRecovered));\r\n\r\n\r\n    // setGlobalSummary({\r\n    //   confirmed: getTop(countries, byConfirmed),\r\n    //   deaths: getTop(countries, byDeaths),\r\n    //   recovered: getTop(countries, byRecovered),\r\n    //   total: total\r\n\r\n    // });\r\n    setTotal(total);\r\n  }\r\n\r\n  const error = (error) => {\r\n    console.log(\"Error! \" + error);\r\n  }\r\n\r\n  const getTop = (countries, byCategory) => {\r\n    return countries.sort(byCategory).slice(0, 5);\r\n  };\r\n\r\n  const byConfirmed = (a, b) => {\r\n    return b.TotalConfirmed - a.TotalConfirmed;\r\n  }\r\n\r\n  const byDeaths = (a, b) => {\r\n    return b.TotalDeaths - a.TotalDeaths;\r\n  }\r\n\r\n  const byRecovered = (a, b) => {\r\n    return b.TotalRecovered - a.TotalRecovered;\r\n  }\r\n\r\n  const getDataSet = async () => {\r\n    const response = await fetch(GRAPH_DATA, {\r\n      headers: {\r\n        'X-Access-Token': 'd908455c-8985-4153-9df2-1f9312db921c'\r\n      }\r\n    });\r\n    const data = await response.json();\r\n    return data;\r\n  }\r\n\r\n  const getStatesData = async () => {\r\n    const response = await fetch(STATES_DATA);\r\n    const data = response.json();\r\n\r\n    return data;\r\n  }\r\n\r\n  const byPositive = (a, b) => {\r\n    return b.positive - a.positive;\r\n  }\r\n\r\n  const handleStatesData = (data) => {\r\n    setStatesData(data.sort(byPositive));\r\n  }\r\n\r\n  const getDataPoints = (element) => {\r\n\r\n\r\n  }\r\n\r\n  const graphDataSet = (data) => {\r\n    let dataSet = data.slice(data.length - 31, data.length);\r\n    let dates = [];\r\n    let confirmed = [];\r\n    let deaths = [];\r\n    let recovered = [];\r\n\r\n    for (let i = 1; i < dataSet.length; i++) {\r\n      dates.push(dataSet[i].Date.slice(5, 10));\r\n      confirmed.push(dataSet[i].Confirmed - dataSet[i - 1].Confirmed)\r\n      deaths.push(dataSet[i].Deaths - dataSet[i - 1].Deaths)\r\n      recovered.push(dataSet[i].Recovered - dataSet[i - 1].Recovered);\r\n    }\r\n\r\n    setGraphData({ confirmed, deaths, recovered, dates })\r\n\r\n\r\n    return data\r\n  }\r\n\r\n\r\n  const displayDailyStats = (data) => {\r\n\r\n\r\n    let confirmed = {};\r\n    let deaths = {};\r\n    let recovered = {};\r\n    let stats = {}\r\n    let ob = {}\r\n    let today;\r\n    let yesterday;\r\n    let tenDaysAgo;\r\n    let aMonthAgo;\r\n    let lastIndex = data.length - 1;\r\n\r\n\r\n    let category = [\"Confirmed\", \"Deaths\", \"Recovered\"]\r\n    for (let i = 0; i < category.length; i++) {\r\n\r\n      today = data[data.length - 1][category[i]] - data[data.length - 2][category[i]];\r\n      yesterday = data[data.length - 2][category[i]] - data[data.length - 3][category[i]]\r\n      tenDaysAgo = data[data.length - 10][category[i]] - data[data.length - 11][category[i]]\r\n      aMonthAgo = data[data.length - 30][category[i]] - data[data.length - 31][category[i]]\r\n\r\n\r\n      stats[category[i]] = {\r\n        today,\r\n        yesterday,\r\n        tenDaysAgo,\r\n        aMonthAgo\r\n      }\r\n\r\n\r\n    }\r\n    setStats(stats);\r\n    return data;\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"col-12 col-md-10 offset-md-1 col-xl-6 offset-xl-1\">\r\n      <DataContext.Provider\r\n        value={{\r\n          globalSummary,\r\n          value: [confirmed, setConfirmed],\r\n          value1: [confirmed, setConfirmed],\r\n          value2: [deaths, setDeaths],\r\n          value3: [recovered, setRecovered],\r\n          value4: [total, setTotal],\r\n          value5: [graphData, setGraphData],\r\n          value6: [confirmToday, setConfirmToday],\r\n          value7: [confirmTen, setConfirmTen],\r\n          value8: [confirmThirty, setConfirmThirty],\r\n          value9: [confirmYesterday, setConfirmYesterday],\r\n          value10: [statesData, setStatesData],\r\n          value11: [graphData, setGraphData],\r\n          value12: [stats, setStats]\r\n        }}>\r\n        {props.children}\r\n      </DataContext.Provider>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useContext } from 'react';\r\nimport Country from \"./Country\";\r\nimport Total from \"./Total\";\r\nimport { DataContext } from \"../DataProvider\"\r\nimport '../App.css';\r\n\r\n\r\nconst TotalConfirm = () => {\r\n\r\n  const { value, value4 } = useContext(DataContext);\r\n  var [num] = value;\r\n  var [total] = value4;\r\n\r\n\r\n  const listCountries = num.map((data, i) =>\r\n    <div className=\"col-md-12\" key={i}>\r\n      <Country name={data.Country.split(\" \", 2).join(\" \")} num={data.TotalConfirmed} />\r\n    </div>\r\n  );\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"col-10 offset-1 col-md-4 offset-md-0\">\r\n      <div className=\"panel\">\r\n        <div className=\"row justify-content-center\">\r\n          Total Confirmed:\r\n          <div className=\"col-md-12 title-name\">\r\n\r\n            <Total num={total.TotalConfirmed} />\r\n          </div>\r\n\r\n        </div>\r\n        <div className=\"row justify-content-center\">\r\n          {listCountries}\r\n        </div>\r\n\r\n      </div>\r\n    </div>\r\n\r\n  );\r\n\r\n}\r\n\r\nexport default TotalConfirm;\r\n","import React, { useContext } from 'react';\r\nimport Country from \"./Country\";\r\nimport Total from \"./Total\";\r\nimport { DataContext } from \"../DataProvider\"\r\nimport '../App.css';\r\n\r\n\r\nconst TotalRecovered = () => {\r\n\r\n  const { value3, value4 } = useContext(DataContext);\r\n  var [num] = value3;\r\n  var [total] = value4;\r\n\r\n\r\n\r\n  const listCountries = num.map((data, i) =>\r\n    <div className=\"col-md-12\" key={i}>\r\n      <Country name={data.Country.split(\" \", 2).join(\" \")} num={data.TotalRecovered} />\r\n    </div>\r\n  );\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"col-10 offset-1 col-md-4 offset-md-0 \">\r\n      <div className=\"panel\">\r\n        <div className=\"row justify-content-center\">\r\n          Total Recovered\r\n          <div className=\"col-md-12 title-name\">\r\n\r\n            <Total num={total.TotalRecovered} />\r\n          </div>\r\n\r\n        </div>\r\n        <div className=\"row justify-content-center\">\r\n          {listCountries}\r\n        </div>\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n}\r\n\r\nexport default TotalRecovered;\r\n","\r\nimport React, { useContext } from 'react';\r\nimport Country from \"./Country\";\r\nimport Total from \"./Total\";\r\nimport { DataContext } from \"../DataProvider\"\r\nimport '../App.css';\r\n\r\n\r\nconst TotalDeath = () => {\r\n\r\n  const { value2, value4 } = useContext(DataContext);\r\n  var [num] = value2;\r\n  var [total] = value4;\r\n\r\n\r\n\r\n  const listCountries = num.map((data, i) =>\r\n    <div className=\"col-md-12\" key={i}>\r\n      <Country name={data.Country.split(\" \", 2).join(\" \")} num={data.TotalDeaths} />\r\n    </div>\r\n  );\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"col-10 offset-1 col-md-4 offset-md-0 \">\r\n\r\n      <div className=\"row justify-content-center\">\r\n        Total Deaths:\r\n        <div className=\"col-md-12 title-name\">\r\n          <Total num={total.TotalDeaths} />\r\n        </div>\r\n      </div>\r\n      <div className=\"row justify-content-center\">\r\n        {listCountries}\r\n      </div>\r\n\r\n    </div>\r\n\r\n  );\r\n\r\n}\r\n\r\nexport default TotalDeath;\r\n","import React from 'react';\r\nimport Title from '../Title'\r\nimport TotalConfirm from './TotalConfirm';\r\nimport TotalRecover from './TotalRecover';\r\nimport TotalDeath from './TotalDeath';\r\n\r\n\r\nconst GlobalSummary = (items) => {\r\n\r\n\r\n  return (\r\n\r\n    <div className=\"row box summary \">\r\n      <div className=\"col-md-12\">\r\n        <Title title=\"Global Summary\" />\r\n        <div className=\"row\">\r\n          <div className=\"col-md-12 offset-md-0\">\r\n            <div className=\"row\">\r\n              <TotalConfirm />\r\n              <TotalRecover />\r\n              <TotalDeath />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"row mb-3\">\r\n          <div className=\"col-12 col-md-12\">\r\n            <h5 className=\"panel-title-right\">GlobalSummary</h5>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\n\r\nexport default GlobalSummary;\r\n","import React from 'react';\r\nimport { getCurrentDate } from './getCurrentDate';\r\n\r\n\r\nconst TodaysDate = () => {\r\n\r\n  return (\r\n\r\n    <div className=\"col-md-4 col-lg-3 col-xl-4 date\">\r\n      {getCurrentDate()}\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default TodaysDate;\r\n","\r\nexport function getCurrentDate ()  {\r\n\r\n  let newDate = new Date();\r\n\r\n  return newDate.toDateString();\r\n\r\n};\r\n","import React from 'react';\r\n\r\nconst CategoryToggle = ({ setCategoryType }) => {\r\n\r\n  return (\r\n    <div className=\"col-10 offset-1 col-md-8 offset-md-0 col-lg-9 col-xl-8 toggle \">\r\n\r\n      <div className=\"btn-group btn-group-toggle\" data-toggle=\"buttons\">\r\n        <label className=\"btn btn-secondary active\" onClick={() => setCategoryType(\"Confirmed\")}>\r\n          <input type=\"radio\" /> Confirmed\r\n        </label>\r\n        <label className=\"btn btn-secondary\" onClick={() => setCategoryType(\"Deaths\")}>\r\n          <input type=\"radio\" /> Deaths\r\n        </label>\r\n        <label className=\"btn btn-secondary\" onClick={() => setCategoryType(\"Recovered\")}>\r\n          <input type=\"radio\" /> Recovered\r\n        </label>\r\n      </div>\r\n\r\n\r\n    </div>\r\n\r\n\r\n  )\r\n\r\n}\r\n\r\nexport default CategoryToggle;\r\n","import React, { useState, useEffect, useContext } from \"react\";\r\nimport {Line} from \"react-chartjs-2\";\r\nimport {DataContext} from \"../DataProvider\"\r\n\r\n\r\nconst BarChart = ({categoryType}) => {\r\n\r\n  const {value5} = useContext(DataContext);\r\n  const [graphData] = value5;\r\n\r\n  let [ labels, setLabels ] = useState([]);\r\n  let [ points, setPoints ] = useState([]);\r\n  useEffect(() => {\r\n    categoryType = categoryType.toLowerCase()\r\n\r\n    setLabels(graphData.dates);\r\n    setPoints(graphData[categoryType]);\r\n  }, [graphData, categoryType])\r\n\r\n  const data = {\r\n  labels: labels,\r\n  datasets: [\r\n    {\r\n      label: \"United States\",\r\n      fill: true,\r\n      lineTension: 0.1,\r\n      backgroundColor: \"rgba(75,192,192,0.4)\",\r\n      borderColor: \"rgba(75,192,192,1)\",\r\n      borderCapStyle: \"butt\",\r\n      borderDash: [],\r\n      borderDashOffset: 0.0,\r\n      borderJoinStyle: \"miter\",\r\n      pointBorderColor: \"rgba(75,192,192,1)\",\r\n      pointBackgroundColor: \"#fff\",\r\n      pointBorderWidth: 1,\r\n      pointHoverRadius: 5,\r\n      pointHoverBackgroundColor: \"rgba(75,192,192,1)\",\r\n      pointHoverBorderColor: \"rgba(220,220,220,1)\",\r\n      pointHoverBorderWidth: 2,\r\n      pointRadius: 1,\r\n      pointHitRadius: 10,\r\n      data: points\r\n    }\r\n  ]\r\n};\r\n\r\n\r\n\r\n\r\n\r\n  return (\r\n\r\n\r\n        <div className=\"col-md-12 offset-md-0 text-right\">\r\n          <Line\r\n          data={data}\r\n          width={100}\r\n          height={200}\r\n          options={{\r\n            maintainAspectRatio: false\r\n          }}\r\n        />\r\n        </div>\r\n\r\n\r\n  )\r\n}\r\n\r\nexport default BarChart;\r\n","import React, {useContext} from 'react';\r\nimport {DataContext} from \"../DataProvider\"\r\nimport {getCurrentDate} from './getCurrentDate';\r\nimport TodaysDate from './TodaysDate';\r\nimport CategoryToggle from './CategoryToggle';\r\n\r\nconst Daily = ({stats, today, yesterday, tenDaysAgo, aMonthAgo}) => {\r\n\r\n  const {value6} = useContext(DataContext);\r\n  const {value7} = useContext(DataContext);\r\n  const {value8} = useContext(DataContext);\r\n  const {value9} = useContext(DataContext);\r\n\r\n  const [confirmToday] = value6;\r\n  const [confirmTen] = value7;\r\n  const [confirmThirty] = value8;\r\n  const [confirmYesterday] = value9;\r\n\r\n\r\n\r\n  return (\r\n    <div className = \"col-12 offset-0 col-md-12 offset-md-0\">\r\n\r\n      <div className = \"row daily\">\r\n        <div className = \"col-3 col-md-3\">\r\n            <div className = \"row\">\r\n              <div className = \"col-md-12 text-center sub-num\">\r\n                  {today}\r\n              </div>\r\n            </div>\r\n            <div className = \"row\">\r\n              <div className = \"col-md-12 text-center sub-title\">\r\n                Today\r\n              </div>\r\n            </div>\r\n        </div>\r\n        <div className = \"col-3 col-md-3\">\r\n          <div className = \"row\">\r\n            <div className =\"col-md-12 text-center sub-num\">\r\n              {yesterday}\r\n            </div>\r\n          </div>\r\n          <div className = \"row\">\r\n            <div className =\"col-md-12 text-center sub-title\">\r\n              Yesterday\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className = \"col-3 col-md-3\">\r\n          <div className = \"row\">\r\n            <div className =\"col-md-12 text-center sub-num\">\r\n            {tenDaysAgo}\r\n            </div>\r\n          </div>\r\n          <div className = \"row\">\r\n            <div className =\"col-md-12 text-center sub-title\">\r\n              10 Days Ago\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className = \"col-3 col-md-3\">\r\n          <div className = \"row\">\r\n            <div className =\"col-md-12 text-center sub-num\">\r\n              {aMonthAgo}\r\n            </div>\r\n          </div>\r\n          <div className = \"row\">\r\n            <div className =\"col-md-12 text-center sub-title\">\r\n            30 Days ago\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Daily\r\n","import React, { useState, useEffect, useContext } from 'react';\r\nimport Title from '../Title';\r\nimport TodaysDate from './TodaysDate';\r\nimport CategoryToggle from './CategoryToggle';\r\nimport BarChart from './BarChart';\r\nimport Daily from './Daily';\r\nimport { DataContext } from \"../DataProvider\"\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst DailyTracker = () => {\r\n\r\n  let { value12 } = useContext(DataContext);\r\n  let [stats] = value12;\r\n  let [categoryType, setCategoryType] = useState(\"Confirmed\");\r\n  let [today, setToday] = useState(\"-\");\r\n  let [yesterday, setYesterday] = useState(\"-\")\r\n  let [tenDaysAgo, setTenDaysAgo] = useState(\"-\")\r\n  let [aMonthAgo, setAMonthAgo] = useState(\"-\")\r\n\r\n\r\n\r\n  let isEmpty = (obj) => {\r\n\r\n    for (var key in obj) {\r\n      if (obj.hasOwnProperty(key))\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n\r\n  let displayStats = () => {\r\n\r\n    setToday(stats[categoryType].today);\r\n    setYesterday(stats[categoryType].yesterday);\r\n    setTenDaysAgo(stats[categoryType].tenDaysAgo);\r\n    setAMonthAgo(stats[categoryType].aMonthAgo);\r\n\r\n\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n    isEmpty(stats) ? console.log(\"Daily Stats is Empty\") : displayStats(categoryType);\r\n  }, [categoryType, stats]);\r\n\r\n\r\n\r\n\r\n  return (\r\n\r\n\r\n    <div className=\"row box details mt-10\">\r\n      <div className=\"col-md-12\">\r\n        <Title title=\"Daily Tracker\" />\r\n        <div className=\"row date-row \">\r\n          <TodaysDate />\r\n          <CategoryToggle setCategoryType={setCategoryType} />\r\n        </div>\r\n        <div className=\"row\">\r\n          <Daily today={today} yesterday={yesterday} tenDaysAgo={tenDaysAgo} aMonthAgo={aMonthAgo} />\r\n        </div>\r\n        <div className=\"row with-margin\">\r\n          <BarChart categoryType={categoryType} />\r\n        </div>\r\n        <div className=\"row mb-3\">\r\n          <div className=\"col-12 col-md-12\">\r\n            <h5 className=\"panel-title-right\">GlobalSummary</h5>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\n\r\nexport default DailyTracker;\r\n","import React, { useContext } from 'react';\r\nimport { DataContext } from \"../DataProvider\"\r\n\r\n\r\n\r\nconst Table = () => {\r\n\r\n  const { value10 } = useContext(DataContext);\r\n\r\n  var [statesData] = value10;\r\n\r\n\r\n  const listStates = statesData.map((data, i) =>\r\n    <tr key={i}>\r\n      <th scope=\"row\">{i + 1}</th>\r\n      <td> {data.state} </td>\r\n      <td> {data.positive} </td>\r\n      <td> {data.recovered ? data.recovered : \"-\"} </td>\r\n      <td> {data.death} </td>\r\n      <td> {data.positiveIncrease} </td>\r\n      <td> {data.deathIncrease} </td>\r\n    </tr>\r\n  );\r\n\r\n  let topTenStates = listStates.slice(0, 10);\r\n\r\n\r\n\r\n  return (\r\n\r\n\r\n    <div className=\"row\">\r\n      <div className=\"col-12 col-md-12 \">\r\n        <div className=\"table-responsive\">\r\n          <table className=\"table text-right\">\r\n            <thead>\r\n              <tr>\r\n                <th scope=\"col\">#</th>\r\n                <th scope=\"col\">State</th>\r\n                <th scope=\"col\">Confirmed</th>\r\n                <th scope=\"col\">Recovered</th>\r\n                <th scope=\"col\">Deaths</th>\r\n                <th scope=\"col\">New Confirmed</th>\r\n                <th scope=\"col\">New Deaths</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {listStates.slice(0, 10)}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default Table;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { geoCentroid } from \"d3-geo\";\r\nimport {\r\n    ComposableMap,\r\n    Geographies,\r\n    Geography,\r\n    Marker,\r\n    Annotation\r\n} from \"react-simple-maps\";\r\n\r\nimport allStates from \"./data/allstates.json\";\r\n\r\nconst geoUrl = \"https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json\";\r\n\r\nconst offsets = {\r\n    VT: [50, -8],\r\n    NH: [34, 2],\r\n    MA: [30, -1],\r\n    RI: [28, 2],\r\n    CT: [35, 10],\r\n    NJ: [34, 1],\r\n    DE: [33, 0],\r\n    MD: [47, 10],\r\n    DC: [49, 21]\r\n};\r\n\r\nconst MapChart = ({ setState, setPosition, setShowBox }) => {\r\n\r\n\r\n    return (\r\n        <>\r\n            <ComposableMap projection=\"geoAlbersUsa\">\r\n\r\n                <Geographies geography={geoUrl}>\r\n\r\n                    {({ geographies }) => (\r\n                        <>\r\n                            {geographies.map(geo => {\r\n                                const cur = allStates.find(s => s.val === geo.id);\r\n                                return (<Geography\r\n                                    key={geo.rsmKey}\r\n                                    stroke=\"#FFF\"\r\n                                    geography={geo}\r\n                                    fill=\"#DDD\"\r\n                                    onClick={() => console.log(geo, cur)}\r\n                                    onMouseEnter={(e) => {\r\n                                        setShowBox('visible')\r\n                                        setState({ name: geo.properties.name, initials: cur.id })\r\n                                        setPosition([e.nativeEvent.offsetX, e.nativeEvent.offsetY])\r\n                                    }}\r\n                                />)\r\n                            })}\r\n                            {geographies.map(geo => {\r\n                                const centroid = geoCentroid(geo);\r\n                                const cur = allStates.find(s => s.val === geo.id);\r\n                                return (\r\n                                    <g key={geo.rsmKey + \"-name\"}>\r\n                                        {cur &&\r\n                                            centroid[0] > -160 &&\r\n                                            centroid[0] < -67 &&\r\n                                            (Object.keys(offsets).indexOf(cur.id) === -1 ? (\r\n                                                <Marker coordinates={centroid}>\r\n                                                    <text y=\"2\" fontSize={14} textAnchor=\"middle\">\r\n                                                        {cur.id}\r\n                                                    </text>\r\n                                                </Marker>\r\n                                            ) : (\r\n                                                    <Annotation\r\n                                                        subject={centroid}\r\n                                                        dx={offsets[cur.id][0]}\r\n                                                        dy={offsets[cur.id][1]}\r\n                                                    >\r\n                                                        <text x={4} fontSize={14} alignmentBaseline=\"middle\">\r\n                                                            {cur.id}\r\n                                                        </text>\r\n                                                    </Annotation>\r\n                                                ))}\r\n                                    </g>\r\n                                );\r\n                            })}\r\n                        </>\r\n                    )}\r\n                </Geographies>\r\n            </ComposableMap>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default MapChart;\r\n","import React, { useState, useEffect, useContext } from 'react';\r\nimport Table from './Table';\r\nimport Title from '../Title'\r\nimport UpdatedLast from './UpdatedLast';\r\nimport MapChart from './MapChart/MapChart';\r\nimport { DataContext } from \"../DataProvider\"\r\n\r\n\r\nconst USData = () => {\r\n\r\n\r\n  const { value10 } = useContext(DataContext);\r\n  const [graphData] = value10;\r\n\r\n  const [position, setPosition] = useState([]);\r\n  const [state, setState] = useState({})\r\n  const [stateName, setStateName] = useState('');\r\n  const [stateData, setStateData] = useState({ newConfirmed: 0, newDeath: 0 });\r\n  const [showBox, setShowBox] = useState('hidden');\r\n\r\n  const [width, setWidth] = useState(window.innerWidth);\r\n  const [height, setHeight] = useState(window.innerHeight);\r\n\r\n  const style = {\r\n    position: 'absolute',\r\n    width: '150px',\r\n    height: '70px',\r\n    fontSize: '12px',\r\n    padding: '5px',\r\n    visibility: showBox,\r\n    backgroundColor: '#282c34',\r\n    border: '2px white solid',\r\n    left: position[0] - 70 + 'px',\r\n    top: position[1] - 70 + 'px'\r\n  }\r\n\r\n  const updateWindowSize = () => {\r\n\r\n    setWidth(window.innerWidth);\r\n    setHeight(window.innerHeight);\r\n\r\n  }\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    let data = graphData.find((s) => s.state === state.initials) || {};\r\n    setStateData({ newConfirmed: data.positiveIncrease, newDeath: data.deathIncrease } || {})\r\n  }, [state.name]);\r\n\r\n  useEffect(() => {\r\n\r\n    window.addEventListener(\"resize\", updateWindowSize)\r\n    return () => window.removeEventListener(\"resize\", updateWindowSize);\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"row box\">\r\n      <div className=\"col-md-12\">\r\n        <Title title=\"State by State\" /> {width < 992 ? <></> : <h5>Hover w/ Cursor</h5>}\r\n        <div style={{ height: 'auto', width: 'auto' }}>\r\n          <div style={style}>\r\n            <div>\r\n              {state.name}\r\n            </div>\r\n            <div>\r\n              New Confirmed: {stateData.newConfirmed}\r\n            </div>\r\n            <div>\r\n              New Death: {stateData.newDeath}\r\n            </div>\r\n          </div>\r\n          {width < 992 ? <Table /> : <MapChart setState={setState} setPosition={setPosition} setStateName={setStateName} setShowBox={setShowBox} />}\r\n        </div>\r\n        <div className=\"row mb-3\">\r\n          <div className=\"col-12 col-md-12\">\r\n            <h5 className=\"panel-title-right\">GlobalSummary</h5>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default USData;\r\n","import React from 'react';\r\n\r\nconst Posts = ({ title, url, img }) => {\r\n\r\n  const postStyle = {\r\n    backgroundImage: `url(${img})`,\r\n\r\n  }\r\n\r\n  const imgStyle = {\r\n    border: '2px solid white'\r\n  }\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col-12 col-lg-12\">\r\n        <a href={url} target=\"_blank\">\r\n          <div className=\"row posts \">\r\n            <div className=\"col-4 col-md-3 offset-md-1 col-lg-3 offset-lg-1 offset-lg-0 col-xl-5 offset-xl-0\">\r\n              <img style={imgStyle} src={img} width=\"100\" height=\"100\"></img>\r\n            </div>\r\n            <div className=\"h-50 col-8 col-md-7 col-lg-7 col-xl-7 offset-xl-0\">\r\n              <span className=\"post-title\">{title}</span>\r\n            </div>\r\n          </div>\r\n        </a>\r\n      </div>\r\n    </div>\r\n\r\n  )\r\n\r\n}\r\n\r\nexport default Posts;\r\n","import React, { useState, useEffect } from 'react';\r\nimport Posts from './Posts';\r\nimport Title from '../Title';\r\nimport Virus from '../img/virus.png'\r\n\r\n\r\n\r\nconst SideBar = () => {\r\n\r\n  const REDDIT_API = \"https://www.reddit.com/r/coronavirus/hot.json?limit=6\"\r\n\r\n  let [posts, setPosts] = useState([]);\r\n\r\n  const getPosts = async () => {\r\n    const response = await fetch(REDDIT_API);\r\n    const data = await response.json();\r\n    setPosts(data.data.children.slice(2, 7));\r\n  }\r\n\r\n\r\n\r\n  let listPosts = posts.map((posts, i) =>\r\n\r\n    <Posts key={i}\r\n      title={posts.data.title}\r\n      url={posts.data.url}\r\n      img={posts.data.thumbnail === 'default' ? Virus : posts.data.thumbnail}\r\n    />\r\n\r\n  );\r\n\r\n\r\n  useEffect(() => {\r\n    getPosts();\r\n  }, []);\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"h-75 col-12 offset-0 col-md-10 offset-md-1 col-lg-10 offset-lg-1 col-xl-3 offset-xl-1 box\">\r\n      <Title title=\"Covid-19 News\" />\r\n      {listPosts}\r\n      <div className=\"row mb-3\">\r\n        <div className=\"col-12 col-md-12\">\r\n          <h5 className=\"panel-title-right\">GlobalSummary</h5>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n  )\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport default SideBar;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport TitleBar from './TitleBar/TitleBar';\r\nimport NavBar from './NavBar/NavBar';\r\nimport GlobalSummary from './GlobalSummary/GlobalSummary';\r\nimport DailyTracker from './DailyTracker/DailyTracker';\r\nimport Table from './USData/Table';\r\nimport USData from './USData/USData';\r\nimport SideBar from './SideBar/SideBar';\r\nimport { DataProvider } from \"./DataProvider\";\r\n\r\n\r\nconst App = () => {\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <nav className=\"navbar fixed-top navbar-light bg-light mb-5\" style={{ backgroundColor: '#CED0D2' }}>\r\n        <span className=\"navbar-brand mb-0 h1\">Covid-19 Tracker</span>\r\n      </nav>\r\n      <div className=\"container-fluid h-100 pt-5\" >\r\n        <div className=\"row\" >\r\n          <DataProvider>\r\n            <GlobalSummary />\r\n            <DailyTracker />\r\n            <USData />\r\n          </DataProvider>\r\n          <SideBar />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/virus.11c8df30.png\";"],"sourceRoot":""}